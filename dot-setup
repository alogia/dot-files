#!/usr/bin/env bash

function raise_error {
	local error_message="$@"
    echo "${error_message}" 1>&2;
}

function print_usage {
	echo "Usage: dot-setup PROGRAM"
}


function resolve_path {
	local SOURCE="${BASH_SOURCE[0]}"
	while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
		DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
		SOURCE="$(readlink "$SOURCE")"
		[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
	done
	DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
}

function try_link { 
	resolve_path
	if [ ! -f ~/$2 ]; then
		mkdir -p ~/$(dirname $2)
		ln -v -s $DIR/$1 ~/$2
	else 
		echo "File ${2} already exists: skipping..."
	fi
}

function try_link_all {
	for f in $(ls $DIR/$1)
	do
		try_link $1/$f $2/$f 
	done
}

arg=$1

case $arg in
	setup)
		try_link dot-setup  			   	bin/dot-setup
		;;
	vim)
		try_link vim/vimrc 					.vimrc
        try_link etc/aspell.en.pws 			.vim/spell/en.utf-8.add
		git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
		;;
	zsh)
		try_link zsh/zshrc.sh 				.zshrc
		try_link zsh/keybindings.sh 		.config/zsh/keybindings
		try_link zsh/exports.sh 			.config/zsh/exports
		try_link zsh/alias.sh 				.config/zsh/alias
		try_link zsh/fzf.sh 				.config/zsh/fzf
		try_link zsh/zsh-dircolors.config 	.zsh-dircolors.config
		try_link zsh/fdignore 				.fdignore
		;;
	emacs)
		try_link emacs/emacs.el 			.emacs.d/init.el
		try_link emacs/sbclrc 				.sbclrc
		try_link emacs/emacsclient.desktop	.local/share/applications/emacsclient.desktop
		try_link emacs/eshell/alias 		.emacs.d/eshell/alias
		try_link emacs/eshell/commands.el 	.emacs.d/eshell/commands.el
		try_link emacs/abbreviations.el 	.emacs.d/abbreviations.el

		try_link_all emacs/config           .emacs.d/config
		try_link_all emacs/snippets  		.emacs.d/snippets

        try_link etc/aspell.en.prepl	 	.aspell.en.prepl
        try_link etc/aspell.en.pws 			.aspell.en.pws
		;;
	screen)
		try_link etc/screenrc 		.screenrc
		;;
	bash)
		try_link bash/bash_profile.sh 	.bash_profile
		try_link bash/bashrc.sh 		.bashrc
		try_link bash/bash_aliases.sh 	.bash_aliases
		;;
	xorg)
		try_link xorg/xinitrc 			.xinitrc
		try_link xorg/Xresources 		.Xresources
		;;
	sway)
		try_link wayland/Xdefaults 		.Xdefaults
		try_link wayland/sway.config 	.config/sway/config
		try_link wayland/swaybar 		.config/sway/swaybar
		try_link wayland/termite.config .config/termite/config
		;;
	termite)
		try_link wayland/termite.config .config/termite/config
		;;
	tmux)
		try_link tmux/tmux.conf 		.tmux.conf
		;;
	xmonad)
		try_link xmonad/xmonad.hs 		.xmonad/xmonad.hs
		;;
	git)
		try_link etc/gitconfig 			.gitconfig
		;;
	R)
		try_link etc/Renviron 			.Renviron
		try_link etc/Rprofile 			.Rprofile
		;;
	rtorrent)
		try_link etc/rtorrent.rc 		.rtorrent.rc
		;;
	imap)
		try_link mail/offlineimaprc 	.offlineimaprc
		try_link mail/offlineimap.py 	.offlineimap.py
		;;
	ycmd)
		try_link etc/ycm_extra_conf.py 	.ycm_extra_conf.py
		;;
	vifm)
	    try_link etc/vifmrc 			.vifm/vifmrc
		;;
	chromium)
		try_link chromium/cvimrc 		.config/cvim/cvimrc
		;;
	firefox)
		try_link firefox/tridactylrc 	.config/tridactyl/tridactylrc
		;;
	*)
		raise_error
		print_usage
		;;
esac
